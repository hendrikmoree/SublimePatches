--- SublimeCodeIntel.py	2013-09-13 14:52:03.000000000 +0200
+++ SublimeCodeIntel.py	2013-09-13 14:53:35.000000000 +0200
@@ -1285,3 +1287,56 @@
         _autocomplete_callback(view, path, lang)
         # If it's a fill char, queue using lower values and preemptive behavior
         # queue(view, _autocomplete_callback, 0, 0, True, args=[path, lang], kwargs={})
+
+
+class GotoClass(sublime_plugin.WindowCommand):
+    def run(self, x='', openFile=False):
+        def _openDefns(defns):
+            if not defns:
+                return
+            defn = defns[0]
+            path = defn.path + ':' + str(defn.line)
+            self.window.open_file(path, sublime.ENCODED_POSITION)
+
+        def _showCplns(cplns):
+            if not cplns:
+                return
+            items = ['..'] if x else []
+            items += ["%s (%s)" % (c[1], c[0]) for c in cplns]
+            def onDone(i):
+                if i == -1: return
+                if items[i] == '..': self.gotoParentModule(x)
+                else: self.gotoSubModule(x, cplns[i - 1] if x else cplns[i])
+            self.window.show_quick_panel(items, lambda i: onDone(i))
+
+        if not x:
+            codeintel(self.window.active_view(), None, 'from ', u"Python", 5, ('cplns',), _showCplns)
+        else:
+            if openFile:
+                # codeintel_scan(self.window.active_view(), None, x, u"Python")
+                folders = getattr(self.window, 'folders', lambda: [])()  # FIXME: it's like this for backward compatibility (<= 2060)
+                folders_id = str(hash(frozenset(folders)))
+                mgr = codeintel_manager(folders_id)
+                buf = mgr.buf_from_content(x.encode('utf-8'), u"Python", None, "<Unsaved>", 'utf-8')
+                buf.scan()
+
+                codeintel(self.window.active_view(), None, x, u"Python", len(x) - 1, ('defns',), _openDefns)
+            else:
+                codeintel(self.window.active_view(), None, 'from %s import ' % x, u"Python", 13 + len(x), ('cplns', ), _showCplns)
+
+    def gotoSubModule(self, module, cplns):
+        if not module or cplns[0] == 'module':
+            x = module
+            if x: x+='.'
+            x += cplns[1]
+            openFile = False
+        else:
+            x = 'from %s import %s' % (module, cplns[1])
+            openFile = True
+        self.window.run_command('goto_class', {'x': x, 'openFile': openFile})
+
+    def gotoParentModule(self, module):
+        parent = module.rsplit('.', 1)[0]
+        if parent == module:
+            parent = ''
+        self.window.run_command('goto_class', {'x': parent, 'openFile': False})
--- Default (OSX).sublime-keymap	2013-09-13 14:59:33.000000000 +0200
+++ Default (OSX).sublime-keymap	2013-09-13 15:01:12.000000000 +0200
@@ -2,5 +2,6 @@
 	{ "keys": ["shift+ctrl+space"], "command": "code_intel_auto_complete" },
 	{ "keys": ["super+alt+ctrl+up"], "command": "goto_python_definition"},
 	{ "keys": ["super+alt+ctrl+left"], "command": "back_to_python_definition"},
-    { "keys": ["super+shift+k"], "command": "show_python_definition" }
+    { "keys": ["super+shift+k"], "command": "show_python_definition" },
+    { "keys": ["f7"], "command": "goto_class"}
 ]
--- SublimeCodeIntel.py	2013-09-13 15:17:32.000000000 +0200
+++ SublimeCodeIntel.new	2013-09-13 15:17:25.000000000 +0200
@@ -841,8 +841,8 @@
 
             def _callback():
                 view_sel = view.sel()
-                if view_sel and view.line(view_sel[0]) == view.line(pos):
-                    callback(*ret)
+                # if view_sel and view.line(view_sel[0]) == view.line(pos):
+                callback(*ret)
             logger(view, 'info', "")
             sublime.set_timeout(_callback, 0)
         else:
